name: Xbox CPython Builder

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag Name'
        required: true
        default: 'v1.0.0'
      package_name:
        description: 'Package Name'
        required: true
        default: 'cpy_xbox'

jobs:
  build:
    runs-on: windows-2022

    env:
      SolutionPath: "UWP/UWPApp.sln"
      Platform: x64
      Configuration: Release
      BuildMode: SideLoadOnly
      AppxBundle: Never
      ProjectPath: "UWP/python34app/python34app.vcxproj"
      ProjectDirectory: "UWP/python34app"
      PackageOutputRootDir: "D:\\a\\cpython\\cpython\\UWP"
      SDL2Dir: "D:\\a\\cpython\\cpython\\UWP\\Libraries\\SDL2"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Clone SDL2 Repository
        run: |
          Write-Host "Cloning SDL2 repository..."
          if (-Not (Test-Path -Path "$env:SDL2Dir")) {
            New-Item -ItemType Directory -Path "$env:SDL2Dir" | Out-Null
          }
          git clone https://github.com/libsdl-org/SDL.git "$env:SDL2Dir"
          Write-Host "SDL2 repository cloned successfully."
        shell: pwsh

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1

      - name: Generate Self-Signed Certificate
        id: generate_cert
        run: |
          try {
            $cert = New-SelfSignedCertificate -CertStoreLocation "Cert:\CurrentUser\My" -Subject "CN=MyUWPCert" -KeyAlgorithm RSA -KeyLength 2048 -Provider "Microsoft Enhanced RSA and AES Cryptographic Provider" -KeyExportPolicy Exportable -NotAfter (Get-Date).AddYears(1) -Type CodeSigningCert
            echo "THUMBPRINT=$($cert.Thumbprint)" >> $env:GITHUB_ENV
            Write-Host "Certificate generated successfully with thumbprint: $($cert.Thumbprint)"
          } catch {
            Write-Host "Failed to generate certificate: $_"
            exit 1
          }
        shell: pwsh

      - name: Set Package Name
        id: set_package_name
        run: |
          echo "PACKAGE_NAME=${{ github.event.inputs.package_name }}_${{ github.event.inputs.tag_name }}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8
          Write-Host "Package name set to: ${{ github.event.inputs.package_name }}_${{ github.event.inputs.tag_name }}"

      - name: Build Application
        run: |
          msbuild /restore `
            "$env:SolutionPath" `
            /p:Platform=$env:Platform `
            /p:Configuration=$env:Configuration `
            /p:UapAppxPackageBuildMode=$env:BuildMode `
            /p:AppxBundle=$env:AppxBundle `
            /p:PackageCertificateThumbprint="${{ env.THUMBPRINT }}" `
            /p:AppxPackageTestDir="${env:PackageOutputRootDir}\${{ env.PACKAGE_NAME }}" `
            /p:RestorePackagesConfig=true `
            /p:AppxPackageSigningEnabled=true `
            /p:AdditionalIncludeDirectories="$env:SDL2Dir\include"
        shell: pwsh

      - name: Create Archive
        run: |
          $PackagePath = "${env:PackageOutputRootDir}"
          if (Test-Path $PackagePath) {
            Write-Host "Creating archive for: $PackagePath"
            Compress-Archive -Path "$PackagePath\*" -DestinationPath "${env:PackageOutputRootDir}\cpy_Archive.zip"
            Write-Host "Archive created successfully at ${env:PackageOutputRootDir}\cpy_Archive.zip"
          } else {
            Write-Host "Package path does not exist for archiving: $PackagePath"
            exit 1
          }
        shell: pwsh

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: cpy_Archive
          path: D:\\a\\cpython\\cpython\\UWP\\cpy_Archive.zip
